rules_version = "2";
service cloud.firestore {
  match /databases/{database}/documents {
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin";
    }

    function isModerator() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "moderator";
    }

    function isValidProfile(field) {
      return get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.name == request.resource.data[field].name
        && get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.photo == request.resource.data[field].photo
        && get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.username == request.resource.data[field].username
      ;
    }

    match /{category}/{categoryId}/members/{userId} {
      allow get;
      allow list: if request.query.limit <= 20;
      allow create, delete: if request.auth.uid == userId;
    }

    match /activity/{id} {
      allow get;
      allow list: if request.query.limit <= 20;
    }

    match /admin/{id} {
      allow get: if isAdmin();
    }

    match /profiles/{createdById} {
      allow get;
      allow list: if request.query.limit == 1;
      allow update:
        if request.auth.uid == createdById
        && !request.resource.data.diff(resource.data).affectedKeys().hasAny(["username"])
      ;
    }

    match /spaces/{id} {
      allow get;
      allow list: if request.query.limit <= 20;
      allow create:
        if request.auth.uid != null
        && request.resource.data.createdAt == request.time
        && isValidProfile("createdBy")
        && request.resource.data.createdById == request.auth.uid
        && request.resource.data.description is string
        && request.resource.data.description.size() <= 1000
        && request.resource.data.memberCount == 0
        && (request.resource.data.photo == null || request.resource.data.photo is string)
        && request.resource.data.updatedAt == request.time
        && isValidProfile("updatedBy")
        && request.resource.data.updatedById == request.auth.uid
      ;
      allow update:
        if request.resource.data.diff(resource.data).affectedKeys().hasOnly(["description", "photo", "updatedAt", "updatedBy", "updatedById"])
        && request.resource.data.description is string
        && request.resource.data.description.size() <= 1000
        && (request.resource.data.photo == null || request.resource.data.photo is string)
        && request.resource.data.updatedAt == request.time
        && isValidProfile("updatedBy")
        && request.resource.data.updatedById == request.auth.uid
      ;
      allow delete:
        if isAdmin()
        || isModerator()
        || (request.auth.uid == resource.data.createdById && request.auth.uid == resource.data.updatedById);
    }

    match /usernames/{username} {
      allow get;
      allow create, update:
        if request.auth.uid != null
        && request.resource.data.uid == request.auth.uid
        && username.matches("^[a-z0-9][a-z0-9_]*([.][a-z0-9_]+)*$")
      ;
    }

    match /users/{userId} {
      allow read: if request.auth.uid == userId;
      allow create, update: if
        request.auth.uid == userId
        && !request.resource.data.diff(resource.data).affectedKeys().hasAny(["name", "role", "username"])
      ;
      match /{subcollection}/{spaceId} {
        allow read: if request.auth.uid == userId;
      }
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}
